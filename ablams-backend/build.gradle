plugins {
    id 'java'
    id 'io.quarkus'
}

dependencies {
    implementation( project(':ablams-communication'))
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'

    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    /*implementation 'io.quarkus:quarkus-arc'*/
/*    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-jackson'*/
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation("io.quarkus:quarkus-flyway")
    implementation("io.quarkus:quarkus-security-jpa")

    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'

    implementation 'io.micrometer:micrometer-core'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'net.jthink:jaudiotagger:2.2.5'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}


tasks.register('processFrontendResources', Copy) {
    // Directory containing the artifacts in the frontend project
    def frontendBuildDir = file("${project(':ablams-frontend').buildDir}/www")
    // Directory where the frontend artifacts must be copied to be packaged alltogether with the backend by the 'war'
    // plugin.
    def frontendResourcesDir = file("${project.buildDir}/resources/main/public")

    group 'Frontend'
    description 'Process frontend resources'
    dependsOn project(':ablams-frontend').tasks.named('assembleFrontend')

    from frontendBuildDir
    into frontendResourcesDir
}

/*tasks.named('processResources') {
    dependsOn tasks.named('processFrontendResources')
}*/

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
